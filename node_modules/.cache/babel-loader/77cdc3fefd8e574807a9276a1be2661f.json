{"ast":null,"code":"import _defineProperty from \"/Users/lcastroemello/Desktop/react-tetris/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/lcastroemello/Desktop/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useCallback } from \"react\";\nimport { randomTetromino, TETROMINOS } from \"../tetrominos\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const rotate = (matrix, dir) => {\n    // make the rows cols (transpose)\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); // Reverse each row to get a rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    // we start getting the previous state and updating it\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/lcastroemello/Desktop/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","randomTetromino","TETROMINOS","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","checkCollision","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\n\nimport { randomTetromino, TETROMINOS } from \"../tetrominos\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n  const rotate = (matrix, dir) => {\n    // make the rows cols (transpose)\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map(col => col[index])\n    );\n    // Reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    // we start getting the previous state and updating it\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n"]},"metadata":{},"sourceType":"module"}