{"ast":null,"code":"import _slicedToArray from \"/Users/lcastroemello/Desktop/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // first flush the stage\n      const NewStage = prevStage.map(row => {\n        row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell);\n      });\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/lcastroemello/Desktop/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","NewStage","map","row","cell","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAG/CN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAAI;AACpCA,QAAAA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD;AACD,OAFgB,CAAjB;AAGD,KALD;;AAOAN,IAAAA,QAAQ,CAACO,IAAI,IAAIN,WAAW,CAACM,IAAD,CAApB,CAAR;AACD,GATQ,EASN,EATM,CAAT;AAUA,SAAO,CAACR,KAAD,EAAQC,QAAR,CAAP;AACD,CAdM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // first flush the stage\n      const NewStage = prevStage.map(row => {\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell));\n      });\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}